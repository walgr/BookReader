package com.wpf.bookreader.DataBase.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wpf.bookreader.DataBase.BookInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_INFO".
*/
public class BookInfoDao extends AbstractDao<BookInfo, String> {

    public static final String TABLENAME = "BOOK_INFO";

    /**
     * Properties of entity BookInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookName = new Property(0, String.class, "bookName", true, "BOOK_NAME");
        public final static Property BookUrl = new Property(1, String.class, "bookUrl", false, "BOOK_URL");
        public final static Property BookImgUrl = new Property(2, String.class, "bookImgUrl", false, "BOOK_IMG_URL");
        public final static Property BookAuthor = new Property(3, String.class, "bookAuthor", false, "BOOK_AUTHOR");
        public final static Property ChapterPosition = new Property(4, int.class, "chapterPosition", false, "CHAPTER_POSITION");
        public final static Property PagePosition = new Property(5, int.class, "pagePosition", false, "PAGE_POSITION");
    }


    public BookInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BookInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_INFO\" (" + //
                "\"BOOK_NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: bookName
                "\"BOOK_URL\" TEXT," + // 1: bookUrl
                "\"BOOK_IMG_URL\" TEXT," + // 2: bookImgUrl
                "\"BOOK_AUTHOR\" TEXT," + // 3: bookAuthor
                "\"CHAPTER_POSITION\" INTEGER NOT NULL ," + // 4: chapterPosition
                "\"PAGE_POSITION\" INTEGER NOT NULL );"); // 5: pagePosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(1, bookName);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(2, bookUrl);
        }
 
        String bookImgUrl = entity.getBookImgUrl();
        if (bookImgUrl != null) {
            stmt.bindString(3, bookImgUrl);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
        stmt.bindLong(5, entity.getChapterPosition());
        stmt.bindLong(6, entity.getPagePosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookInfo entity) {
        stmt.clearBindings();
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(1, bookName);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(2, bookUrl);
        }
 
        String bookImgUrl = entity.getBookImgUrl();
        if (bookImgUrl != null) {
            stmt.bindString(3, bookImgUrl);
        }
 
        String bookAuthor = entity.getBookAuthor();
        if (bookAuthor != null) {
            stmt.bindString(4, bookAuthor);
        }
        stmt.bindLong(5, entity.getChapterPosition());
        stmt.bindLong(6, entity.getPagePosition());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookInfo readEntity(Cursor cursor, int offset) {
        BookInfo entity = new BookInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookImgUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookAuthor
            cursor.getInt(offset + 4), // chapterPosition
            cursor.getInt(offset + 5) // pagePosition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookInfo entity, int offset) {
        entity.setBookName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookImgUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterPosition(cursor.getInt(offset + 4));
        entity.setPagePosition(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookInfo entity, long rowId) {
        return entity.getBookName();
    }
    
    @Override
    public String getKey(BookInfo entity) {
        if(entity != null) {
            return entity.getBookName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookInfo entity) {
        return entity.getBookName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
