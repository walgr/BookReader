package com.wpf.bookreader.DataBase.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wpf.bookreader.DataBase.ChapterInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTER_INFO".
*/
public class ChapterInfoDao extends AbstractDao<ChapterInfo, String> {

    public static final String TABLENAME = "CHAPTER_INFO";

    /**
     * Properties of entity ChapterInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Position = new Property(0, int.class, "position", false, "POSITION");
        public final static Property Url = new Property(1, String.class, "url", true, "URL");
        public final static Property BookUrl = new Property(2, String.class, "bookUrl", false, "BOOK_URL");
        public final static Property ChapterName = new Property(3, String.class, "chapterName", false, "CHAPTER_NAME");
        public final static Property ChapterPageContent = new Property(4, String.class, "chapterPageContent", false, "CHAPTER_PAGE_CONTENT");
    }


    public ChapterInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChapterInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTER_INFO\" (" + //
                "\"POSITION\" INTEGER NOT NULL ," + // 0: position
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 1: url
                "\"BOOK_URL\" TEXT," + // 2: bookUrl
                "\"CHAPTER_NAME\" TEXT," + // 3: chapterName
                "\"CHAPTER_PAGE_CONTENT\" TEXT);"); // 4: chapterPageContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChapterInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPosition());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(3, bookUrl);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
 
        String chapterPageContent = entity.getChapterPageContent();
        if (chapterPageContent != null) {
            stmt.bindString(5, chapterPageContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChapterInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPosition());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String bookUrl = entity.getBookUrl();
        if (bookUrl != null) {
            stmt.bindString(3, bookUrl);
        }
 
        String chapterName = entity.getChapterName();
        if (chapterName != null) {
            stmt.bindString(4, chapterName);
        }
 
        String chapterPageContent = entity.getChapterPageContent();
        if (chapterPageContent != null) {
            stmt.bindString(5, chapterPageContent);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public ChapterInfo readEntity(Cursor cursor, int offset) {
        ChapterInfo entity = new ChapterInfo( //
            cursor.getInt(offset + 0), // position
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // chapterPageContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChapterInfo entity, int offset) {
        entity.setPosition(cursor.getInt(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChapterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChapterPageContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChapterInfo entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(ChapterInfo entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChapterInfo entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
